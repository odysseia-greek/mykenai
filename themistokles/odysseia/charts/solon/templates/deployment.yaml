{{- include "koinos.deploymentbase" .}}
      annotations:
        elastic/indices: "dictionary;grammar;text;quiz;tracing"
        elastic/roles: "api;seeder;hybrid;creator;alias"
        perikles/hostname: "solon"
        perikles/validity: "365"
    spec:
      serviceAccountName: {{ .Values.serviceAccountName }}
      initContainers:
        - name: drakon
          {{- if .Values.global.commonConfig.config.externalRepo | quote }}
          image: {{ .Values.global.commonConfig.images.imageRepo}}{{ .Values.images.init.repo }}:{{ .Values.images.init.tag }}
          {{ else }}
          image: {{ .Values.images.init.repo }}:{{ .Values.images.init.tag }}
          {{- end}}
          imagePullPolicy: {{ .Values.global.commonConfig.config.pullPolicy }}
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: ELASTIC_INDEXES
            valueFrom:
              fieldRef:
                fieldPath: metadata.annotations['elastic/indices']
          - name: ELASTIC_ROLES
            valueFrom:
              fieldRef:
                fieldPath: metadata.annotations['elastic/roles']
          - name: ELASTIC_SEARCH_PASSWORD
            valueFrom:
              secretKeyRef:
                name: aristoteles-es-elastic-user
                key: elastic
          envFrom:
            - configMapRef:
                name: {{ .Values.name }}
          volumeMounts:
            - name: {{ .Values.tlsConfig.elastic.name }}
              mountPath: {{ .Values.tlsConfig.elastic.path }}
              readOnly: true
        - name: peisistratos
          {{- if .Values.global.commonConfig.config.externalRepo | quote }}
          image: {{ .Values.global.commonConfig.images.imageRepo}}{{ .Values.images.initSeeder.repo }}:{{ .Values.images.initSeeder.tag }}
          {{ else }}
          image: {{ .Values.images.init.repo }}:{{ .Values.images.initSeeder.tag }}
          {{- end}}
          imagePullPolicy: {{ .Values.global.commonConfig.config.pullPolicy }}
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: AUTH_METHOD
              value: {{ .Values.envVariables.peisistratos.vaultAuthMethod }}
          {{- if .Values.envVariables.peisistratos.unsealProvider }}
          envFrom:
            - configMapRef:
                name: {{ .Values.name }}
          envFrom:
            - configMapRef:
                name: gcpconfig
          {{- end }}
          volumeMounts:
            - name: {{ .Values.tlsConfig.vault.name }}
              mountPath: {{ .Values.tlsConfig.vault.path }}
              readOnly: true
      containers:
        - name: "{{ .Values.name }}"
          {{- if .Values.global.commonConfig.config.externalRepo | quote }}
          image: {{ .Values.global.commonConfig.images.imageRepo}}{{ .Values.images.odysseiaapi.repo }}:{{ .Values.images.odysseiaapi.tag }}
          {{ else }}
          image: {{ .Values.images.odysseiaapi.repo }}:{{ .Values.images.odysseiaapi.tag }}
          {{- end}}
          imagePullPolicy: {{ .Values.global.commonConfig.config.pullPolicy }}
          env:
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: AUTH_METHOD
            value: {{ .Values.envVariables.solon.vaultAuthMethod }}
          - name: ELASTIC_SEARCH_PASSWORD
            valueFrom:
              secretKeyRef:
                name: aristoteles-es-elastic-user
                key: elastic
          envFrom:
            - configMapRef:
                name: {{ .Values.name }}
          volumeMounts:
            - name: {{ .Values.tlsConfig.vault.name }}
              mountPath: {{ .Values.tlsConfig.vault.path }}
              readOnly: true
            - name: {{ .Values.tlsConfig.elastic.name }}
              mountPath: {{ .Values.tlsConfig.elastic.path }}
              readOnly: true
            {{- range .Values.tlsConfig.mounts }}
            - name: {{ .name }}
              mountPath: {{ .path }}
              readOnly: true
            {{- end }}
          ports:
            - containerPort: {{ .Values.envVariables.solon.port }}
          livenessProbe:
            httpGet:
              scheme: HTTPS
              path: /solon/v1/health
              port: {{ .Values.envVariables.solon.port }}
            initialDelaySeconds: {{ .Values.global.commonConfig.config.initialDelayLiveness }}
            periodSeconds: {{ .Values.global.commonConfig.config.periodSeconds }}
          readinessProbe:
            httpGet:
              scheme: HTTPS
              path: /solon/v1/ping
              port: {{ .Values.envVariables.solon.port }}
            initialDelaySeconds: {{ .Values.global.commonConfig.config.initialDelayReadiness }}
            periodSeconds: {{ .Values.global.commonConfig.config.periodSeconds }}
          resources:
            requests:
              memory: {{ .Values.services.solon.requests.memory }}
              cpu: {{ .Values.services.solon.requests.cpu }}
            limits:
              memory: {{.Values.services.solon.limits.memory}}
              cpu: {{.Values.services.solon.limits.memory}}
      volumes:
        - name: {{ .Values.tlsConfig.vault.name }}
          secret:
            secretName: {{ .Values.tlsConfig.vault.secretName }}
        - name: {{ .Values.tlsConfig.elastic.name }}
          secret:
            secretName: {{ .Values.tlsConfig.elastic.secretName }}
        {{- range .Values.tlsConfig.mounts }}
        - name: {{ .name }}
          secret:
            secretName: {{ .secretName }}
            {{- if .defaultMode }}
            defaultMode: {{ .defaultMode }}
        {{- end }}
  {{- end }}